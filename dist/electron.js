"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));
var _crossSpawn = _interopRequireDefault(require("cross-spawn"));
var _log = _interopRequireDefault(require("./log"));
var _defaultDependencies = _interopRequireDefault(require("./defaultDependencies"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Simple Electron runner. Runs the project with the bin provided by the 'electron' package.
 * @class
 */
class Electron {
  constructor($) {
    this.log = new _log.default('electron');
    this.$ = $;
  }
  async init() {
    this.electron = await this.$.getDependency('electron', _defaultDependencies.default.electron);
  }
  run() {
    // Until: https://github.com/electron-userland/electron-prebuilt/pull/118
    const {
      env
    } = process;
    env.ELECTRON_ENV = 'development';
    const cmd = [];
    if (this.$.env.options.debug) {
      cmd.push('--debug=5858');
    }
    cmd.push('.');
    const child = (0, _crossSpawn.default)(this.electron.dependency, cmd, {
      cwd: this.$.env.paths.electronApp.root,
      env
    });

    // TODO: check if we can configure piping in spawn options
    child.stdout.on('data', chunk => {
      process.stdout.write(chunk);
    });
    child.stderr.on('data', chunk => {
      process.stderr.write(chunk);
    });
  }
}
exports.default = Electron;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcnVudGltZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Nyb3NzU3Bhd24iLCJfbG9nIiwiX2RlZmF1bHREZXBlbmRlbmNpZXMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJFbGVjdHJvbiIsImNvbnN0cnVjdG9yIiwiJCIsImxvZyIsIkxvZyIsImluaXQiLCJlbGVjdHJvbiIsImdldERlcGVuZGVuY3kiLCJkZWZhdWx0RGVwZW5kZW5jaWVzIiwicnVuIiwiZW52IiwicHJvY2VzcyIsIkVMRUNUUk9OX0VOViIsImNtZCIsIm9wdGlvbnMiLCJkZWJ1ZyIsInB1c2giLCJjaGlsZCIsInNwYXduIiwiZGVwZW5kZW5jeSIsImN3ZCIsInBhdGhzIiwiZWxlY3Ryb25BcHAiLCJyb290Iiwic3Rkb3V0Iiwib24iLCJjaHVuayIsIndyaXRlIiwic3RkZXJyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL2xpYi9lbGVjdHJvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XG5pbXBvcnQgc3Bhd24gZnJvbSAnY3Jvc3Mtc3Bhd24nO1xuXG5pbXBvcnQgTG9nIGZyb20gJy4vbG9nJztcbmltcG9ydCBkZWZhdWx0RGVwZW5kZW5jaWVzIGZyb20gJy4vZGVmYXVsdERlcGVuZGVuY2llcyc7XG5cbi8qKlxuICogU2ltcGxlIEVsZWN0cm9uIHJ1bm5lci4gUnVucyB0aGUgcHJvamVjdCB3aXRoIHRoZSBiaW4gcHJvdmlkZWQgYnkgdGhlICdlbGVjdHJvbicgcGFja2FnZS5cbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVjdHJvbiB7XG4gICAgY29uc3RydWN0b3IoJCkge1xuICAgICAgICB0aGlzLmxvZyA9IG5ldyBMb2coJ2VsZWN0cm9uJyk7XG4gICAgICAgIHRoaXMuJCA9ICQ7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5lbGVjdHJvbiA9IGF3YWl0IHRoaXMuJC5nZXREZXBlbmRlbmN5KCdlbGVjdHJvbicsIGRlZmF1bHREZXBlbmRlbmNpZXMuZWxlY3Ryb24pO1xuICAgIH1cblxuICAgIHJ1bigpIHtcbiAgICAgICAgLy8gVW50aWw6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbGVjdHJvbi11c2VybGFuZC9lbGVjdHJvbi1wcmVidWlsdC9wdWxsLzExOFxuICAgICAgICBjb25zdCB7IGVudiB9ID0gcHJvY2VzcztcbiAgICAgICAgZW52LkVMRUNUUk9OX0VOViA9ICdkZXZlbG9wbWVudCc7XG5cbiAgICAgICAgY29uc3QgY21kID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuJC5lbnYub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgICAgY21kLnB1c2goJy0tZGVidWc9NTg1OCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgY21kLnB1c2goJy4nKTtcblxuICAgICAgICBjb25zdCBjaGlsZCA9IHNwYXduKHRoaXMuZWxlY3Ryb24uZGVwZW5kZW5jeSwgY21kLCB7XG4gICAgICAgICAgICBjd2Q6IHRoaXMuJC5lbnYucGF0aHMuZWxlY3Ryb25BcHAucm9vdCxcbiAgICAgICAgICAgIGVudlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUT0RPOiBjaGVjayBpZiB3ZSBjYW4gY29uZmlndXJlIHBpcGluZyBpbiBzcGF3biBvcHRpb25zXG4gICAgICAgIGNoaWxkLnN0ZG91dC5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoY2h1bmspO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShjaHVuayk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsSUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsb0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUF3RCxTQUFBRCx1QkFBQUssQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNlLE1BQU1HLFFBQVEsQ0FBQztFQUMxQkMsV0FBV0EsQ0FBQ0MsQ0FBQyxFQUFFO0lBQ1gsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSUMsWUFBRyxDQUFDLFVBQVUsQ0FBQztJQUM5QixJQUFJLENBQUNGLENBQUMsR0FBR0EsQ0FBQztFQUNkO0VBRUEsTUFBTUcsSUFBSUEsQ0FBQSxFQUFHO0lBQ1QsSUFBSSxDQUFDQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNKLENBQUMsQ0FBQ0ssYUFBYSxDQUFDLFVBQVUsRUFBRUMsNEJBQW1CLENBQUNGLFFBQVEsQ0FBQztFQUN4RjtFQUVBRyxHQUFHQSxDQUFBLEVBQUc7SUFDRjtJQUNBLE1BQU07TUFBRUM7SUFBSSxDQUFDLEdBQUdDLE9BQU87SUFDdkJELEdBQUcsQ0FBQ0UsWUFBWSxHQUFHLGFBQWE7SUFFaEMsTUFBTUMsR0FBRyxHQUFHLEVBQUU7SUFFZCxJQUFJLElBQUksQ0FBQ1gsQ0FBQyxDQUFDUSxHQUFHLENBQUNJLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFO01BQzFCRixHQUFHLENBQUNHLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDNUI7SUFFQUgsR0FBRyxDQUFDRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBRWIsTUFBTUMsS0FBSyxHQUFHLElBQUFDLG1CQUFLLEVBQUMsSUFBSSxDQUFDWixRQUFRLENBQUNhLFVBQVUsRUFBRU4sR0FBRyxFQUFFO01BQy9DTyxHQUFHLEVBQUUsSUFBSSxDQUFDbEIsQ0FBQyxDQUFDUSxHQUFHLENBQUNXLEtBQUssQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJO01BQ3RDYjtJQUNKLENBQUMsQ0FBQzs7SUFFRjtJQUNBTyxLQUFLLENBQUNPLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBSyxJQUFLO01BQy9CZixPQUFPLENBQUNhLE1BQU0sQ0FBQ0csS0FBSyxDQUFDRCxLQUFLLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0lBQ0ZULEtBQUssQ0FBQ1csTUFBTSxDQUFDSCxFQUFFLENBQUMsTUFBTSxFQUFHQyxLQUFLLElBQUs7TUFDL0JmLE9BQU8sQ0FBQ2lCLE1BQU0sQ0FBQ0QsS0FBSyxDQUFDRCxLQUFLLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0VBQ047QUFDSjtBQUFDRyxPQUFBLENBQUE5QixPQUFBLEdBQUFDLFFBQUEiLCJpZ25vcmVMaXN0IjpbXX0=