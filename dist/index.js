"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _exports;
var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _shelljs = _interopRequireDefault(require("shelljs"));
var _env = _interopRequireDefault(require("./env"));
var _electron = _interopRequireDefault(require("./electron"));
var _log = _interopRequireDefault(require("./log"));
var _desktop = _interopRequireDefault(require("./desktop"));
var _electronApp = _interopRequireDefault(require("./electronApp"));
var _meteorApp = _interopRequireDefault(require("./meteorApp"));
var _electronBuilder = _interopRequireDefault(require("./electronBuilder"));
var _packager = _interopRequireDefault(require("./packager"));
var _utils = _interopRequireDefault(require("./utils"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// eslint-disable-next-line no-unused-vars

_shelljs.default.config.fatal = true;

/**
 * Main entity.
 * @class
 * @property {Env} env
 * @property {Electron} electron
 * @property {InstallerBuilder} installerBuilder
 * @property {ElectronApp} electronApp
 * @property {Desktop} desktop
 * @property {MeteorApp} meteorApp
 */
class MeteorDesktop {
  /**
   * @param {string} input        - Meteor app dir
   * @param {string} output       - output dir for bundle/package/installer
   * @param {Object} options      - options from cli.js
   * @param {Object} dependencies - dependencies object
   * @constructor
   */
  constructor(input, output, options, dependencies) {
    const Log = dependencies.log;
    this.log = new Log('index');
    this.version = this.getVersion();
    this.log.info('initializing');
    this.env = new _env.default(input, output, options);
    this.electron = new _electron.default(this);
    this.electronBuilder = new _electronBuilder.default(this);
    this.electronApp = new _electronApp.default(this);
    this.desktop = new _desktop.default(this);
    this.meteorApp = new _meteorApp.default(this);
    this.utils = _utils.default;
  }

  /**
   * Tries to read the version from our own package.json.
   *
   * @returns {string}
   */
  getVersion() {
    if (this.version) {
      return this.version;
    }
    let version = null;
    try {
      ({
        version
      } = JSON.parse(_fs.default.readFileSync(_path.default.join(__dirname, '..', 'package.json'), 'UTF-8')));
    } catch (e) {
      this.log.error(`error while trying to read ${_path.default.join(__dirname, 'package.json')}`, e);
      process.exit(1);
    }
    return version;
  }

  /**
   * Tries to read the version from our own package.json.
   *
   * @returns {string}
   */
  getElectronVersion() {
    let version = null;
    try {
      const {
        dependencies = {},
        devDependencies = {}
      } = JSON.parse(_fs.default.readFileSync(_path.default.join(this.env.paths.meteorApp.root, 'package.json'), 'UTF-8'));
      if (!('electron' in dependencies) && !('electron' in devDependencies)) {
        this.log.error('electron not found in meteor project dependencies');
        process.exit(1);
      }
      version = dependencies.electron || devDependencies.electron;
      if (this.electronApp.depsManager.checks.version.regex.test(version)) {
        ({
          version
        } = JSON.parse(_fs.default.readFileSync(_path.default.join(this.env.paths.meteorApp.root, 'node_modules', 'electron', 'package.json'), 'UTF-8')));
      }
    } catch (e) {
      this.log.error(`error while trying to read ${_path.default.join(this.env.paths.meteorApp.root, 'package.json')}`, e);
      process.exit(1);
    }
    return version;
  }
  async init() {
    this.desktop.scaffold();
    this.meteorApp.updateGitIgnore();
    await this.electronApp.init();
  }
  async buildInstaller(throwError = false) {
    this.env.options.installerBuild = true;
    await this.electronApp.build();
    try {
      await this.electronBuilder.build();
    } catch (e) {
      this.log.error('error occurred while building installer', e);
      if (throwError) {
        throw new Error(e);
      }
    }
  }
  async run() {
    await this.electronApp.build(true);
  }
  async build() {
    await this.electronApp.build();
  }
  justRun() {
    this.electron.run();
  }
  async runPackager() {
    this.packager = new _packager.default(this);
    await this.packager.init();
    await this.electronApp.build();
    this.packager.packageApp().catch(e => {
      this.log.error(`while trying to build a package an error occurred: ${e}`);
    });
  }
  async getDependency(name, version, declarationCheck = true) {
    if (declarationCheck) {
      try {
        const {
          dependencies = {},
          devDependencies = {}
        } = JSON.parse(_fs.default.readFileSync(_path.default.join(this.env.paths.meteorApp.root, 'package.json'), 'UTF-8'));
        if (!(name in dependencies) && !(name in devDependencies)) {
          await this.meteorApp.runNpm(['i', '-D', '-E', '--only=dev', `${name}@${version}`], 'inherit');
        }
      } catch (e) {
        this.log.error(`could no read ${_path.default.join(this.env.paths.meteorApp.root, 'package.json')}`, e);
        process.exit(1);
      }
    }
    const dependencyPath = _path.default.join(this.env.paths.meteorApp.root, 'node_modules', name);
    let dependency = null;
    try {
      dependency = require(dependencyPath);
    } catch (e) {
      if (declarationCheck) {
        this.log.warn(`could not find ${name}, installing the default version for you: ${name}@${version}`);
        try {
          await this.meteorApp.runNpm(['i', '-D', '-E', '--only=dev', `${name}@${version}`], 'inherit');
        } catch (err) {
          this.log.error(err);
          process.exit(1);
        }
      } else {
        this.log.warn(`could not find ${name}, exiting`);
        process.exit(1);
      }
    } finally {
      if (!dependency) {
        dependency = require(dependencyPath);
      }
    }
    const dependencyVersion = require(_path.default.join(dependencyPath, 'package.json')).version;
    if (dependencyVersion !== version) {
      if (dependencyVersion.split('.')[0] !== version.split('.')[0]) {
        this.log.warn(`you are using a ${name}@${dependencyVersion} while the recommended version is ` + `${version}, the compatibility version is different, use at your own risk, be sure to report ` + 'that when submitting issues');
      } else {
        this.log.warn(`you are using a ${name}@${dependencyVersion} while the recommended version is ` + `${version}, be sure to report that when submitting issues`);
      }
    }
    return {
      dependency,
      path: dependencyPath
    };
  }
}
function _exports(input, output, options, {
  log = _log.default
} = {
  log: _log.default
}) {
  return new MeteorDesktop(input, output, options, {
    log
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,